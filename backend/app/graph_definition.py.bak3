from typing import Dict, Any, List, Optional, Literal, Tuple, Annotated, Callable
from datetime import datetime
from pydantic import BaseModel, Field
from langgraph.checkpoint.memory import MemorySaver
from langgraph.graph import END, StateGraph, START
from langgraph.prebuilt import tools_condition, ToolNode
from langgraph.types import Command
from langgraph.graph.message import AnyMessage, add_messages

from langchain_core.messages import HumanMessage, AIMessage, SystemMessage, ToolMessage
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.runnables import Runnable, RunnableConfig, RunnableLambda
from langchain_openai import ChatOpenAI

# 컨텍스트 툴, 레시피 툴, 냉장고 툴 (예시)
from .tools.context import fetch_context
from .tools.recipes import get_all_recipes, safe_tools as recipe_safe_tools, sensitive_tools as recipe_sensitive_tools
from .tools.refrigerators import safe_tools as refrigerator_safe_tools, sensitive_tools as refrigerator_sensitive_tools

from typing_extensions import TypedDict

llm = ChatOpenAI(model="gpt-4o-mini")

def update_dialog_stack(left: list[str], right: Optional[str]) -> list[str]:
    """dialog_state 스택 push/pop 헬퍼"""
    if right is None:
        return left
    if right == "pop":
        return left[:-1]
    return left + [right]

class State(TypedDict):
    messages: Annotated[list[AnyMessage], add_messages]
    context_info: str
    dialog_state: Annotated[
        list[Literal["assistant", "recipe", "refrigerator"]],
        update_dialog_stack,
    ]

class CompleteOrEscalate(BaseModel):
    """작업 완료하거나 상위로 돌아가는 특수 도구"""
    cancel: bool = True
    reason: str

class ToRecipeAssistant(BaseModel):
    """레시피 어시스턴트로 전환"""
    recipe_id: int = None
    request: str = Field(...)

class ToRefrigeratorAssistant(BaseModel):
    """냉장고 어시스턴트로 전환"""
    refrigerator_id: int = None
    request: str = Field(...)

class Assistant:
    """LLM 응답 실행 래퍼"""
    def __init__(self, runnable: Runnable):
        self.runnable = runnable

    def __call__(self, state: State, config: RunnableConfig):
        while True:
            result = self.runnable.invoke(state)
            if not result.tool_calls and (
                not result.content
                or (isinstance(result.content, list) and not result.content[0].get("text"))
            ):
                # 출력이 너무 빈약하면 "실제 출력으로 응답해주세요" 메시지 추가
                messages = state["messages"] + [("user", "실제 출력으로 응답해주세요.")]
                state = {**state, "messages": messages}
            else:
                break
        return {"messages": result}

def handle_tool_error(state):
    error = state.get("error")
    tool_calls = state["messages"][-1].tool_calls
    # Generate a single "ToolMessage" telling there's an error
    return {
        "messages": [
            ToolMessage(
                name=tool_calls[0]["name"],  # e.g., create_recipe
                content=f"오류 발생: {error}",
                tool_call_id=tool_calls[0]["id"],
            )
        ]
    }

def create_tool_node_with_fallback(tools: list) -> dict:
    """
    Wrap the given list of tools with fallback for error handling.
    """
    return ToolNode(tools).with_fallbacks(
        [RunnableLambda(handle_tool_error)],
        exception_key="error"
    )

def create_entry_node(assistant_name: str, new_dialog_state: str):
    """
    예: ToRecipeAssistant → "레시피 어시스턴트로 전환"
    """
    def entry_node(state: State) -> dict:
        from langchain_core.messages import ToolMessage
        tool_call_id = state["messages"][-1].tool_calls[0]["id"]
        return {
            "messages": [
                ToolMessage(
                    content=(
                        f"The assistant is now the {assistant_name}. "
                        "Use the provided tools to help the user. "
                        "IMPORTANT: Only call ONE tool at a time. "
                        "If the user changes their mind or you finish your task, call CompleteOrEscalate to return."
                    ),
                    tool_call_id=tool_call_id,
                )
            ],
            "dialog_state": new_dialog_state,
        }
    return entry_node

def pop_dialog_state(state: State) -> dict:
    """CompleteOrEscalate 후 메인 어시스턴트로 복귀."""
    from langchain_core.messages import ToolMessage
    messages = []
    if state["messages"][-1].tool_calls:
        messages.append(
            ToolMessage(
                content="Resuming dialog with the main assistant.",
                tool_call_id=state["messages"][-1].tool_calls[0]["id"],
            )
        )
    return {"dialog_state": "pop", "messages": messages}

# 서브 어시스턴트 설정을 위한 클래스
class SubAssistantConfig:
    """서브 어시스턴트 설정 클래스"""
    def __init__(
        self,
        name: str,  # 어시스턴트 이름 (예: "레시피 어시스턴트")
        id: str,    # 어시스턴트 ID (예: "recipe")
        system_prompt: str,  # 시스템 프롬프트
        safe_tools: List,    # 안전한 도구 목록
        sensitive_tools: List,  # 민감한 도구 목록
        transition_tool: BaseModel  # 전환 도구 (예: ToRecipeAssistant)
    ):
        self.name = name
        self.id = id
        self.system_prompt = system_prompt
        self.safe_tools = safe_tools
        self.sensitive_tools = sensitive_tools
        self.transition_tool = transition_tool

def create_sub_assistant(
    builder: StateGraph,
    config: SubAssistantConfig
) -> None:
    """서브 어시스턴트 노드와 엣지를 생성하는 함수"""
    
    # 1. 어시스턴트 프롬프트 생성
    assistant_prompt = ChatPromptTemplate.from_messages([
        (
            "system",
            config.system_prompt
        ),
        ("placeholder", "{messages}")
    ]).partial(time=datetime.now)

    # 2. 어시스턴트 실행기 생성
    assistant_runnable = assistant_prompt | llm.bind_tools(
        config.safe_tools + config.sensitive_tools + [CompleteOrEscalate]
    )
    
    # 3. 노드 생성
    # 3.1 진입 노드
    builder.add_node(f"enter_{config.id}", create_entry_node(config.name, config.id))
    # 3.2 어시스턴트 노드
    builder.add_node(config.id, Assistant(assistant_runnable))
    # 3.3 도구 노드
    builder.add_node(f"{config.id}_safe_tools", create_tool_node_with_fallback(config.safe_tools))
    builder.add_node(f"{config.id}_sensitive_tools", create_tool_node_with_fallback(config.sensitive_tools))
    
    # 4. 엣지 연결
    # 4.1 진입 노드 -> 어시스턴트 노드
    builder.add_edge(f"enter_{config.id}", config.id)
    
    # 4.2 어시스턴트 노드 -> 도구 노드 또는 종료 노드 (조건부)
    def route_assistant(state: State):
        route = tools_condition(state)
        if route == END:
            return END
        tool_calls = state["messages"][-1].tool_calls
        if any(tc["name"] == CompleteOrEscalate.__name__ for tc in tool_calls):
            return "leave_skill"
        safe_toolnames = [t.name for t in config.safe_tools]
        if all(tc["name"] in safe_toolnames for tc in tool_calls):
            return f"{config.id}_safe_tools"
        return f"{config.id}_sensitive_tools"
    
    builder.add_conditional_edges(
        config.id,
        route_assistant,
        [f"{config.id}_safe_tools", f"{config.id}_sensitive_tools", "leave_skill", END],
    )
    
    # 4.3 도구 노드 -> 어시스턴트 노드
    builder.add_edge(f"{config.id}_safe_tools", config.id)
    builder.add_edge(f"{config.id}_sensitive_tools", config.id)

def build_graph() -> StateGraph:
    """LangGraph 빌드 함수"""
    builder = StateGraph(State)

    # 1) START → fetch context
    def context(state: State):
        return {"context_info": fetch_context.invoke({})}
    builder.add_node("fetch_context_info", context)
    builder.add_edge(START, "fetch_context_info")

    def route_to_workflow(state: State):
        dialog_state = state.get("dialog_state", [])
        return dialog_state[-1] if dialog_state else "primary_assistant"

    builder.add_conditional_edges("fetch_context_info", route_to_workflow)

    # 2) 메인 어시스턴트 설정
    primary_assistant_prompt = ChatPromptTemplate.from_messages(
        [
            (
                "system",
                # ---- System Prompt Start ----
                "You are the main, high-level AI assistant for Acme. "
                "You handle general inquiries and pass specialized tasks to sub-assistants (RefrigeratorAssistant, RecipeAssistant, etc.).\n\n"

                "=== IMPORTANT RULES ===\n"
                "1. You can only call ONE function (tool) per assistant message.\n"
                "2. If the user wants to do a specialized task, call the appropriate sub-assistant via the function call.\n"
                "3. Do not reveal the existence of sub-assistants or function calls to the user.\n"
                "4. If the user wants to do multiple tasks, handle them one at a time in sequence.\n"
                "5. If searching or requesting external data, be persistent. Expand query if needed. "
                "6. If user wants to do a task related to recipe and refrigerator in the same time, do not call both tools in the same time, but handle them one at a time in sequence.\n"
                "Do not give up after one empty search.\n\n"

                "You can handle:\n"
                "- Basic Q&A about Acme.\n"
                "- Searching for general info.\n"
                "But if the user specifically needs to create or update something that belongs to specialized domain,\n"
                "delegate that to the corresponding sub-assistant.\n\n"

                "=== Current Date & Time ===\n"
                "{time}\n\n"

                "Context: {context_info}\n\n"

                "=== If you do not have enough context to answer, ask clarifying questions. ==="
                # ---- System Prompt End ----
            ),
            ("placeholder", "{messages}"),
        ]
    ).partial(time=datetime.now)

    # 서브 어시스턴트 전환 도구 목록
    transition_tools = [ToRecipeAssistant, ToRefrigeratorAssistant]
    
    primary_tools = []  # 필요시 추가
    assistant_runnable = primary_assistant_prompt | llm.bind_tools(
        primary_tools + transition_tools
    )

    builder.add_node("primary_assistant", Assistant(assistant_runnable))
    builder.add_node("primary_assistant_tools", create_tool_node_with_fallback(primary_tools))

    # 메인 어시스턴트 라우팅 함수
    def route_primary_assistant(state: State):
        route = tools_condition(state)
        if route == END:
            return END
        tool_calls = state["messages"][-1].tool_calls
        if tool_calls:
            name = tool_calls[0]["name"]
            # 동적으로 서브 어시스턴트 전환 처리
            if name == ToRecipeAssistant.__name__:
                return "enter_recipe"
            elif name == ToRefrigeratorAssistant.__name__:
                return "enter_refrigerator"
            return "primary_assistant_tools"
        raise ValueError("No tool calls found but not END")

    # 메인 어시스턴트 엣지 연결
    builder.add_conditional_edges(
        "primary_assistant",
        route_primary_assistant,
        ["enter_recipe", "enter_refrigerator", "primary_assistant_tools", END],
    )
    builder.add_edge("primary_assistant_tools", "primary_assistant")

    # 3) 레시피 어시스턴트 설정
    recipe_system_prompt = """You are HIRecipi's Recipe Management Specialist Assistant. The main assistant delegates recipe-related tasks to you.

Key Responsibilities:
1. Create/modify/delete recipes.
2. Manage recipe content/formatting.
3. Handle recipe sharing/favorites.

Important:
1. Call only ONE tool at a time.
2. If user changes request or you finish the recipe task, call CompleteOrEscalate to return.
3. If a tool call fails (e.g., create_recipe returns an error), DO NOT automatically retry.
   - Instead, show an error or call CompleteOrEscalate.
4. If user explicitly asks to retry, you can call tool again.
5. Do not mention that you are a specialized assistant or mention 'function calls' to the user.

Language handling:
 - Maintain the user's language.

If searching or retrieving recipes returns empty, expand the query range or confirm with the user.

Now handle the conversation based on the user's messages below."""

    recipe_config = SubAssistantConfig(
        name="레시피 어시스턴트",
        id="recipe",
        system_prompt=recipe_system_prompt,
        safe_tools=recipe_safe_tools,
        sensitive_tools=recipe_sensitive_tools,
        transition_tool=ToRecipeAssistant
    )
    
    create_sub_assistant(builder, recipe_config)

    # 4) 냉장고 어시스턴트 설정
    refrigerator_system_prompt = """You are the Refrigerator Management Specialist Assistant. 
The main assistant delegates to you whenever the user wants to create, update, or delete refrigerators.

=== IMPORTANT RULES ===
1. Only ONE tool call (function) per message.
2. If the user changes topic or you have completed the refrigerator task, call `CompleteOrEscalate` to return.
3. If you need more info or the user changed their mind, also call `CompleteOrEscalate`.
4. If a tool call fails (e.g., create_recipe returns an error), DO NOT automatically retry.
   - Instead, show an error or call CompleteOrEscalate.
5. If user explicitly asks to retry, you can call tool again.
6. For searching or listing refrigerators, be persistent. Expand the query if results are empty.
7. If user is trying to create refrigerators, categories, and ingredients in one message, please finish creating the objects in this order: refrigerators -> categorys -> ingredients.
8. Before creating, modifying, or deleting a category, it must be clear which refrigerator is being referenced. Similarly, when creating, modifying, or deleting an ingredient, both the category and the refrigerator must be explicitly identified. If they are not clearly specified, the system should either call an API to retrieve the necessary information or prompt the user to provide the refrigerator and category names.
9. The user doesn't know about your existence as a sub-assistant, do not mention sub-assistant or function calls directly.

=== Example tasks ===
- Create a new refrigerator: call `create_refrigerator` with name and description.
- Update or delete a refrigerator: call `update_refrigerator` or `delete_refrigerator`.
- If the user says 'never mind', or wants a recipe or something else, `CompleteOrEscalate`.

=== Current Time ===
{time}

Now read the conversation so far and respond."""

    refrigerator_config = SubAssistantConfig(
        name="냉장고 어시스턴트",
        id="refrigerator",
        system_prompt=refrigerator_system_prompt,
        safe_tools=refrigerator_safe_tools,
        sensitive_tools=refrigerator_sensitive_tools,
        transition_tool=ToRefrigeratorAssistant
    )
    
    create_sub_assistant(builder, refrigerator_config)

    # 5) Leave skill node
    builder.add_node("leave_skill", pop_dialog_state)
    builder.add_edge("leave_skill", "primary_assistant")

    return builder