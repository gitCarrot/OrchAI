이 프로젝트는 Next.js 15 를 사용합니다.

Next.js: Route Handler 우선 사용
	•	모든 API 엔드포인트는 Route Handler를 사용하여 구현하세요.
	•	데이터베이스 작업, 외부 API 호출, 인증 등 복잡한 서버 작업은 반드시 Route Handler를 사용하세요.
	•	Server Action은 단순 폼 제출 또는 간단한 데이터 처리에만 사용하세요.
        (예: form 데이터로 바로 DB 생성/수정/삭제 처리 등과 같이 간단한 로직)
	-     Dynamic Routes를 써서 api/fridge/[fridge_id] 이런식으로 폴더를 만드세요


Next.js 라우팅: App Router 사용
	•	프로젝트 내 라우팅은 Pages Router 대신 App Router를 사용하세요.

프로젝트 구조: 주요 폴더 구조 예시
	•	프로젝트 구조는 다음과 같이 설정하세요. src 폴더는 사용하지 않습니다.

your-nextjs-project/
│
├── app/                      # App Router 라우트 폴더
│ ├── api/                    # API 엔드포인트 관련 폴더
│ ├── dashboard/              # 개별 페이지 폴더 예시 (재사용되지 않는 컴포넌트 포함)
│ │ └── page.tsx             # dashboard 페이지
│ │ └── DashboardStats.tsx   # 페이지 전용 컴포넌트
│ └── ...                    # 추가 라우트 및 페이지
│
├── components/               # 공통 컴포넌트 모음
│ ├── ui                      # ShadCN 공통 UI 컴포넌트
│ │ ├── button.tsx
│ │ ├── input.tsx
│ │ ├── select.tsx
│ │ ├── toast.tsx
│ │ └── toaster.tsx
│ ├── layout/                 # 레이아웃 관련 공통 컴포넌트
│ │ ├── header.tsx
│ │ ├── footer.tsx
│ │ └── sidebar.tsx
│ ├── OptionsDropdown.tsx
│ ├── PromptInput.tsx
│ └── GeneratedImagePreview.tsx
│
├── store/                    # 상태 관리 관련 폴더
│ ├── gallery.ts              # 갤러리 관련 상태 관리
│ ├── auth.ts                 # 인증 관련 상태 관리
│ ├── community.ts            # 커뮤니티 관련 상태 관리
│ └── index.ts                # 상태 관리 유틸리티 및 타입 정의
│
├── hooks/                    # 커스텀 훅 폴더
│ ├── use-toast.ts            # 토스트 관련 훅
│ ├── use-auth.ts             # 인증 관련 훅
│ └── use-media.ts            # 미디어 쿼리 등 UI 관련 훅
│
├── db/                       # 데이터베이스 관련 폴더
│ ├── schema.ts               # DrizzleORM 스키마 정의 파일
│ └── index.ts                # 데이터베이스 연결 초기화 파일
│
├── drizzle/                  # DrizzleORM 관련 설정 파일
│
├── public/                   # 정적 파일 (이미지, 폰트 등)
│ └── favicon.ico
│
├── styles/                   # 글로벌 스타일 (CSS, SCSS, Tailwind 등)
│ └── globals.css
│
├── types/                    # 공통 인터페이스 및 타입 정의
│ └── index.ts                # 여러 파일에서 사용할 공통 타입 및 인터페이스 정의 파일
│
├── utils/                    # 유틸리티 함수 모음
│ ├── fetcher.ts              # API 호출 등 유틸리티 함수
│ └── mockData.ts             # 목업 데이터 관리
│
├── middleware.ts             # Clerk 미들웨어 설정 파일
├── .env                      # 환경 변수 설정 파일
├── drizzle.config.ts         # DrizzleORM 설정 파일
├── next.config.mjs           # Next.js 설정 파일
├── package.json              # 프로젝트 패키지 정보
└── tsconfig.json             # TypeScript 설정 파일

TypeScript 사용: TS 사용 권장
	•	프로젝트 전반에 TypeScript를 사용하세요.
	•	타입 안정성을 위해 모든 컴포넌트와 서버 로직에 TypeScript를 적용하세요.

TypeScript 인터페이스 정의 규칙: ‘I’ 접두사 사용
	•	인터페이스 정의 시 이름 앞에 ‘I’를 접두사로 추가하세요.
	•	예시:

export interface IComment {
    id: string
    text: string
    author: string
}


	•	인터페이스 생성은 types/index.ts 파일에 작성하세요.

컴포넌트 생성: ShadCN 우선 사용
	•	모든 UI 컴포넌트는 ShadCN을 우선으로 생성하세요.
	•	ShadCN 컴포넌트 생성 CLI 명령어는 npx shadcn@latest add입니다.
	•	Toast 관련 컴포넌트는 다음 위치에 있습니다:

components/ui/toast.tsx      # Toast 기본 컴포넌트
components/ui/toaster.tsx    # Toast 컨테이너 컴포넌트
hooks/use-toast.ts           # Toast 커스텀 훅

Clerk 인증: clerkMiddleware() 사용
	•	모든 인증은 Clerk을 사용하세요.
	•	middleware.ts 파일에서는 **clerkMiddleware()**를 사용하세요.
	•	authMiddleware는 사용하지 않습니다.
	•	기본 미들웨어 설정 예시:

import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server'

const isPublicRoute = createRouteMatcher(['/sign-in(.*)', '/sign-up(.*)'])

export default clerkMiddleware(async (auth, request) => {
    if (!isPublicRoute(request)) {
        await auth.protect()
    }
})

export const config = {
    matcher: ['/((?!.*\\..*|_next).*)', '/', '/(api|trpc)(.*)']
}

ClerkClient: 유저 정보 조회 규칙
	•	ClerkClient를 사용하여 유저 정보를 조회할 때는 다음 규칙을 따르세요:
	•	기본 사용법:

import { clerkClient } from '@clerk/nextjs/server'

const client = await clerkClient()

// 단일 유저 조회
const user = await client.users.getUser(userId)

// 다수 유저 조회 (권장)
const users = await client.users.getUserList({
    userId: userIds // string[] 타입
})

라우터에서는

import { getAuth, currentUser } from '@clerk/nextjs/server';

export async function GET(
  request: NextRequest,
  { params }: { params: { refrigeratorId: string } }
) {
  try {
    const { userId } = await getAuth(request);
  }
}

const user = await currentUser();
const userEmail = user?.emailAddresses[0]?.emailAddress;

이런식으로 가져오세요.

ORM: Drizzle 사용
	•	데이터베이스 작업을 위해 ORM으로 Drizzle을 사용하세요.
	•	Drizzle을 사용하여 데이터베이스 모델을 정의하고, CRUD 작업을 구현하세요.




Server Action 를 사용하세요

개요
	•	Server Action은 Next.js 15 이후 도입된 기능으로, 폼 제출(form submit)이나 간단한 서버 데이터 처리를 위해 사용합니다.
	•	데이터베이스 작업, 외부 API 호출 등 복잡한 서버 로직은 Route Handler(app/api 내 폴더를 통한 route.ts)로 구현하는 것을 권장합니다.
	•	하지만 간단한 DB insert/update/delete 정도는 Server Action으로 빠르게 처리할 수 있습니다.

Server Action 정의 방법

1) 인라인 정의

Server Component 안에서 함수에 "use server" 지시어를 추가하여 선언하는 방법입니다.

// app/page.tsx
export default function Page() {
  // Server Action
  async function create() {
    'use server'
    // 서버에서 실행되는 로직
  }

  return <form action={create}> ... </form>
}

2) 모듈 단위 정의

다른 파일(actions.ts)에 "use server" 지시어를 추가하고, 내보낸(export) 모든 함수가 Server Action으로 동작하도록 하는 방법입니다.

// app/actions.ts
'use server'

export async function create() {
  // 서버에서 실행되는 로직
}

export async function update() {
  // 서버에서 실행되는 로직
}

Client Component에서 위 함수를 불러 사용 가능합니다.

// app/button.tsx
'use client'
 
import { create } from './actions'
 
export function Button() {
  return <button onClick={() => create()}>Create</button>
}

Server Action 호출 패턴
	•	폼 전송(Form Submit)

<form action={create} method="POST">
  ...
</form>

	•	create 함수는 <form action={create}> 형태로 호출됩니다.
	•	기본적으로 FormData를 인자로 받아 처리 가능합니다.

	•	이벤트 핸들러

<button onClick={() => create()}>Click</button>

	•	Client Component에서 직접 함수를 불러와 호출할 수도 있습니다.

	•	bind로 추가 인자 전달

const updateUserWithId = updateUser.bind(null, userId)
<form action={updateUserWithId}>...</form>

	•	bind를 활용해 Server Action에 인자를 간단히 전달할 수 있습니다.

FormData 활용

Server Action에 전달된 FormData를 활용하여 폼 데이터를 간단히 처리할 수 있습니다.

export default function Page() {
  async function createInvoice(formData: FormData) {
    'use server'

    const rawFormData = {
      customerId: formData.get('customerId'),
      amount: formData.get('amount'),
      status: formData.get('status'),
    }
    
    // DB 작업 등
  }

  return (
    <form action={createInvoice}>
      <input name="customerId" />
      <input name="amount" />
      <input name="status" />
      <button type="submit">Submit</button>
    </form>
  )
}

Client Component에서 FormEvent 없이 Server Action 호출

'use client'
 
import { incrementLike } from './actions'
import { useState } from 'react'
 
export default function LikeButton({ initialLikes }: { initialLikes: number }) {
  const [likes, setLikes] = useState(initialLikes)
 
  return (
    <>
      <p>Total Likes: {likes}</p>
      <button
        onClick={async () => {
          const updatedLikes = await incrementLike()
          setLikes(updatedLikes)
        }}
      >
        Like
      </button>
    </>
  )
}

오류 처리 및 검증
	•	Server Action 내부에서 직접 예외를 던지면(throw new Error) 최상위 에러 라우트(error.js 등)나 에러 경계에 잡힙니다.
	•	Zod 등 서버 사이드 검증 라이브러리를 활용하여 FormData를 유효성 검증한 뒤, 에러 발생 시 객체를 반환(return)하고 useActionState 등으로 클라이언트에서 처리할 수도 있습니다.

// app/actions.ts
'use server'
 
import { z } from 'zod'
 
const schema = z.object({
  email: z.string().email("Invalid email"),
})
 
export async function createUser(formData: FormData) {
  const validatedFields = schema.safeParse({
    email: formData.get('email'),
  })

  if (!validatedFields.success) {
    return {
      errors: validatedFields.error.flatten().fieldErrors,
    }
  }

  // DB 작업, 리다이렉트, 캐시 무효화 등
}

Revalidation, Redirect 등 고급 기능
	•	Revalidate

import { revalidatePath, revalidateTag } from 'next/cache'

revalidatePath('/posts')
revalidateTag('posts')

Server Action 내에서 데이터 변경 후 특정 경로 또는 tag를 기반으로 캐시를 무효화할 수 있습니다.

	•	Redirect

import { redirect } from 'next/navigation'

redirect('/dashboard')

Server Action 완료 후 특정 페이지로 리다이렉트할 수 있습니다.

쿠키 사용
	•	Server Action 내부에서는 cookies() API를 사용할 수 있습니다.

'use server'
 
import { cookies } from 'next/headers'
 
export async function exampleAction() {
  const cookieStore = cookies()
 
  // Get cookie
  cookieStore.get('name')?.value
 
  // Set cookie
  cookieStore.set('name', 'Delba')
 
  // Delete cookie
  cookieStore.delete('name')
}

보안 및 권한(Authorization) 체크
	•	Server Action도 결국 공개된 HTTP Endpoint와 유사한 동작을 하므로, 내부에서 유저 권한 등을 직접 확인해야 합니다.
	•	Clerk의 auth()로부터 사용자 정보를 가져와 체크하거나, 필요한 경우 Route Handler에서 분리된 로직으로 권한 로직을 처리할 수 있습니다.

'use server'
import { auth } from '@clerk/nextjs'

export async function addItem(formData: FormData) {
  const { userId } = auth()
  if (!userId) {
    throw new Error('로그인 필요')
  }

  // ...
}

Server Action 정리
	•	간단한 서버 로직, 폼 제출 처리, 낙관적 업데이트(Optimistic Update) 등에서 Server Action을 적극적으로 활용하세요.
	•	데이터베이스 연산이나 인증이 필요한 경우, 반드시 보안 체크를 수행하세요.
	•	복잡한 서버 로직(외부 API 결합, 다양한 DB 트랜잭션 등)은 **Route Handler**를 사용하는 것을 기본 원칙으로 합니다.

Form 관련 컴포넌트는 아래를 베이스로 작성해주세요.

"use client";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";

위 가이드를 준수하여 Server Action과 Route Handler를 적절히 병행해서 사용해주세요.